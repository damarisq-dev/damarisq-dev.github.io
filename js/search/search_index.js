var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/injectables/ApiService.html",[0,0.043,1,0.526]],["body/injectables/ApiService.html",[0,0.04,1,0.496,2,0.315,3,0.23,4,0.23,5,0.155,6,0.411,7,0.888,8,0.416,9,0.842,10,2.139,11,1.396,12,1.877,13,1.877,14,1.877,15,0.315,16,1.195,17,1.745,18,0.838,19,1.195,20,1.361,21,0.1,22,1.104,23,1.055,24,1.361,25,2.629,26,1.877,27,2.209,28,1.195,29,1.642,30,1.642,31,3.287,32,1.282,33,1.877,34,2.858,35,1.195,36,1.877,37,1.877,38,2.319,39,2.738,40,1.195,41,3.287,42,1.511,43,1.877,44,1.195,45,1.877,46,1.195,47,0.361,48,1.195,49,0.23,50,1.877,51,0.687,52,1.195,53,0.416,54,0.416,55,0.23,56,0.23,57,1.195,58,0.687,59,3.034,60,1.195,61,1.195,62,3.287,63,2.629,64,1.955,65,1.642,66,1.642,67,1.195,68,1.955,69,3.287,70,2.629,71,2.629,72,1.195,73,1.195,74,1.195,75,1.195,76,1.195,77,1.195,78,1.195,79,1.195,80,1.195,81,1.195,82,1.195,83,1.195,84,1.195,85,1.195,86,0.687,87,1.195,88,0.028,89,0.044,90,0.028]],["title/injectables/AuthService.html",[0,0.043,91,0.693]],["body/injectables/AuthService.html",[0,0.041,2,0.322,3,0.234,4,0.234,5,0.158,6,0.45,8,0.424,9,0.855,10,2.242,15,0.62,17,1.819,18,0.898,20,1.294,21,0.099,22,1.183,23,0.925,24,1.294,27,0.7,32,1.484,39,1.418,42,1.096,47,0.452,49,0.234,51,1.35,53,0.424,54,0.424,55,0.234,56,0.234,64,1.418,65,1.658,66,1.902,68,1.418,86,0.7,88,0.028,89,0.045,90,0.028,91,0.663,92,0.906,93,1.907,94,1.907,95,2.657,96,2.657,97,1.907,98,1.907,99,1.907,100,2.657,101,1.218,102,1.907,103,2.657,104,3.059,105,1.218,106,2.145,107,1.907,108,3.479,109,2.657,110,1.218,111,2.377,112,1.218,113,1.907,114,2.349,115,1.218,116,1.218,117,1.907,118,1.218,119,1.907,120,2.657,121,2.657,122,2.461,123,2.657,124,1.907,125,1.218,126,1.907,127,2.657,128,1.218,129,1.218,130,1.218,131,1.218,132,1.218,133,1.218,134,1.218,135,2.349,136,1.218,137,1.218,138,1.218,139,1.218,140,1.907,141,1.907,142,1.907,143,1.218,144,1.218,145,1.218,146,1.218,147,0.906,148,2.349,149,1.218,150,1.218,151,1.218,152,2.349,153,1.218,154,1.218,155,1.218,156,1.218,157,1.218,158,0.906,159,1.218]],["title/components/ServicesComponent.html",[160,0.894,161,0.693]],["body/components/ServicesComponent.html",[3,0.482,4,0.482,5,0.325,6,0.413,15,0.927,18,0.662,21,0.098,22,1.11,47,0.482,49,0.482,55,0.482,56,0.482,88,0.059,89,0.074,90,0.059,160,1.574,161,1.285,162,3.191,163,2.508,164,2.508,165,1.865,166,2.508,167,3.509,168,3.509,169,2.609,170,2.508,171,2.508,172,2.508,173,1.442,174,3.191,175,3.191,176,2.508,177,3.693,178,2.508,179,2.508,180,2.508]],["title/modules/ServicesModule.html",[181,1.145,182,0.894]],["body/modules/ServicesModule.html",[1,0.964,3,0.383,4,0.383,5,0.258,6,0.258,21,0.099,47,0.743,49,0.383,51,1.145,55,0.383,56,0.383,88,0.046,89,0.064,90,0.046,91,1.271,161,1.386,169,1.481,173,1.145,181,1.145,182,1.821,183,1.145,184,1.481,185,2.328,186,1.481,187,2.328,188,2.328,189,1.481,190,1.481,191,1.481,192,1.481,193,0.964,194,1.271,195,2.036,196,1.481,197,1.481,198,1.991,199,2.739,200,1.991,201,2.739,202,2.739,203,2.739,204,2.739,205,1.991,206,1.991,207,2.739,208,2.739,209,1.481,210,1.991,211,1.481,212,1.481,213,1.991,214,1.991]],["title/injectables/ServicesService.html",[0,0.043,215,1.145]],["body/injectables/ServicesService.html",[0,0.075,2,0.767,3,0.558,4,0.558,5,0.376,6,0.452,15,0.99,18,0.767,21,0.097,47,0.558,49,0.558,53,1.011,54,1.011,55,0.558,56,0.558,88,0.068,89,0.082,90,0.068,215,2.008,216,2.16,217,2.905]],["title/injectables/SharedDataService.html",[0,0.043,193,0.526]],["body/injectables/SharedDataService.html",[0,0.058,2,0.515,3,0.375,4,0.375,5,0.252,6,0.481,8,0.678,9,1.21,11,2.301,15,0.817,17,1.727,18,0.958,20,1.388,21,0.099,22,1.077,23,1.162,24,1.388,29,1.12,30,2.016,32,1.499,42,1.12,47,0.375,49,0.375,53,0.678,54,0.678,55,0.375,56,0.375,58,1.779,65,1.551,88,0.046,89,0.063,90,0.046,111,2.301,147,2.484,193,0.712,218,2.766,219,1.449,220,2.007,221,3.34,222,2.698,223,2.698,224,1.949,225,2.698,226,1.949,227,3.507,228,2.698,229,1.949,230,2.698,231,1.949,232,3.34,233,1.949,234,1.949,235,1.949]],["title/injectables/UserService.html",[0,0.043,194,0.693]],["body/injectables/UserService.html",[0,0.056,1,0.949,2,0.5,3,0.364,4,0.364,5,0.245,6,0.478,8,0.659,9,1.187,10,1.752,15,0.5,17,1.557,18,0.916,20,1.187,21,0.099,22,0.92,23,1.207,24,1.187,27,1.52,29,1.088,30,1.088,32,0.85,47,0.667,49,0.364,53,0.659,54,0.659,55,0.364,56,0.364,58,1.896,66,1.088,88,0.044,89,0.062,90,0.044,106,2.266,122,2.266,193,0.974,194,0.92,209,1.408,211,1.408,212,1.408,220,1.967,236,1.408,237,3.299,238,3.048,239,2.645,240,1.894,241,2.645,242,2.645,243,1.894,244,1.894,245,2.645,246,1.894,247,1.894,248,1.894,249,1.894,250,1.894,251,1.894,252,1.894,253,1.894,254,1.894,255,1.894,256,1.894,257,1.894,258,2.645,259,1.894,260,1.894,261,1.894,262,1.894,263,1.894]],["title/coverage.html",[264,2.037]],["body/coverage.html",[0,0.083,1,0.703,5,0.345,6,0.512,7,1.98,21,0.095,23,0.926,86,1.53,88,0.062,89,0.077,90,0.062,91,0.926,92,1.98,160,1.195,161,0.926,165,1.98,193,0.703,194,0.926,215,1.53,216,1.98,218,1.98,219,1.98,236,1.98,264,1.98,265,2.663,266,2.663,267,2.663,268,3.957,269,3.313,270,2.663,271,3.313,272,2.663,273,2.663,274,2.663]],["title/index.html",[8,0.693,275,1.482]],["body/index.html",[1,0.94,2,0.683,21,0.094,88,0.06,89,0.076,90,0.06,91,1.238,158,2.42,160,1.161,161,1.387,173,1.487,181,1.87,182,1.867,184,1.924,185,1.924,186,1.924,187,1.924,188,1.924,189,1.924,190,1.924,191,1.924,192,1.924,193,0.94,194,1.238,195,2.42,196,1.924,197,1.924,275,1.924,276,2.588]],["title/modules.html",[183,1.575]],["body/modules.html",[21,0.086,88,0.075,89,0.086,90,0.075,182,1.434,183,1.837,277,3.196,278,3.196,279,3.196,280,3.196]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"modules.html":{}}}],["0",{"_index":268,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":270,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":271,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":272,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":269,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["5",{"_index":276,"title":{},"body":{"index.html":{}}}],["accesskey",{"_index":79,"title":{},"body":{"injectables/ApiService.html":{}}}],["actual_component",{"_index":180,"title":{},"body":{"components/ServicesComponent.html":{}}}],["amplify",{"_index":205,"title":{},"body":{"modules/ServicesModule.html":{}}}],["amplify/api",{"_index":52,"title":{},"body":{"injectables/ApiService.html":{}}}],["amplify/auth",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["amplifyangularmodule",{"_index":203,"title":{},"body":{"modules/ServicesModule.html":{}}}],["amplifyservice",{"_index":204,"title":{},"body":{"modules/ServicesModule.html":{}}}],["angular",{"_index":206,"title":{},"body":{"modules/ServicesModule.html":{}}}],["angular/common",{"_index":202,"title":{},"body":{"modules/ServicesModule.html":{}}}],["angular/core",{"_index":49,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["any,data",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":50,"title":{},"body":{"injectables/ApiService.html":{}}}],["api.del(this.apiname",{"_index":76,"title":{},"body":{"injectables/ApiService.html":{}}}],["api.get(this.apiname",{"_index":67,"title":{},"body":{"injectables/ApiService.html":{}}}],["api.post(this.apiname",{"_index":72,"title":{},"body":{"injectables/ApiService.html":{}}}],["api.put(this.apiname",{"_index":75,"title":{},"body":{"injectables/ApiService.html":{}}}],["api.service",{"_index":209,"title":{},"body":{"modules/ServicesModule.html":{},"injectables/UserService.html":{}}}],["apigclient",{"_index":77,"title":{},"body":{"injectables/ApiService.html":{}}}],["apigclient[requestname](params",{"_index":85,"title":{},"body":{"injectables/ApiService.html":{}}}],["apigclientfactory.newclient",{"_index":78,"title":{},"body":{"injectables/ApiService.html":{}}}],["apiname",{"_index":25,"title":{},"body":{"injectables/ApiService.html":{}}}],["apiservice",{"_index":1,"title":{"injectables/ApiService.html":{}},"body":{"injectables/ApiService.html":{},"modules/ServicesModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["ar/src/app/utils/constants",{"_index":249,"title":{},"body":{"injectables/UserService.html":{}}}],["arn",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":10,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.completenewpassword(user",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.currentauthenticateduser",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.currentcredentials",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.currentsession",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.forgotpasswordsubmit(username",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":210,"title":{},"body":{"modules/ServicesModule.html":{}}}],["auth.signin(username",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.signout",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["authorization",{"_index":74,"title":{},"body":{"injectables/ApiService.html":{}}}],["authservice",{"_index":91,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["await",{"_index":66,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":51,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"modules/ServicesModule.html":{}}}],["aws.cognitoidentity",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["backoffice",{"_index":6,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["body",{"_index":39,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{}}}],["boolean",{"_index":245,"title":{},"body":{"injectables/UserService.html":{}}}],["bootstrap",{"_index":186,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["browse",{"_index":280,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":277,"title":{},"body":{"modules.html":{}}}],["callback",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["callback(err.code",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["callback(null",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["callback(user.challengename",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":68,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{}}}],["catch(error",{"_index":260,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":56,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["clear",{"_index":221,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["cluster_servicesmodule",{"_index":189,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_declarations",{"_index":190,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_exports",{"_index":191,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["cluster_servicesmodule_providers",{"_index":192,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["code",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitoidentity",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitoidentity.getcredentialsforidentity(params",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["commonmodule",{"_index":201,"title":{},"body":{"modules/ServicesModule.html":{}}}],["component",{"_index":160,"title":{"components/ServicesComponent.html":{}},"body":{"components/ServicesComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":178,"title":{},"body":{"components/ServicesComponent.html":{}}}],["components",{"_index":162,"title":{},"body":{"components/ServicesComponent.html":{}}}],["confirmnewpassword",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmnewpassword(username",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"could",{"_index":233,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["console.log('error",{"_index":262,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(error",{"_index":263,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["constants",{"_index":248,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject('apiname",{"_index":57,"title":{},"body":{"injectables/ApiService.html":{}}}],["constructor(apiname",{"_index":16,"title":{},"body":{"injectables/ApiService.html":{}}}],["constructor(apiservice",{"_index":240,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":250,"title":{},"body":{"injectables/UserService.html":{}}}],["core/services/src/lib/api.service.ts",{"_index":7,"title":{},"body":{"injectables/ApiService.html":{},"coverage.html":{}}}],["core/services/src/lib/api.service.ts:18",{"_index":35,"title":{},"body":{"injectables/ApiService.html":{}}}],["core/services/src/lib/api.service.ts:31",{"_index":44,"title":{},"body":{"injectables/ApiService.html":{}}}],["core/services/src/lib/api.service.ts:44",{"_index":46,"title":{},"body":{"injectables/ApiService.html":{}}}],["core/services/src/lib/api.service.ts:63",{"_index":28,"title":{},"body":{"injectables/ApiService.html":{}}}],["core/services/src/lib/api.service.ts:75",{"_index":40,"title":{},"body":{"injectables/ApiService.html":{}}}],["core/services/src/lib/api.service.ts:8",{"_index":19,"title":{},"body":{"injectables/ApiService.html":{}}}],["core/services/src/lib/auth.service.ts",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["core/services/src/lib/auth.service.ts:12",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:16",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:20",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:33",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:42",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:46",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:50",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:57",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/auth.service.ts:8",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["core/services/src/lib/services.component.ts",{"_index":165,"title":{},"body":{"components/ServicesComponent.html":{},"coverage.html":{}}}],["core/services/src/lib/services.component.ts:12",{"_index":170,"title":{},"body":{"components/ServicesComponent.html":{}}}],["core/services/src/lib/services.module.ts",{"_index":198,"title":{},"body":{"modules/ServicesModule.html":{}}}],["core/services/src/lib/services.service.ts",{"_index":216,"title":{},"body":{"injectables/ServicesService.html":{},"coverage.html":{}}}],["core/services/src/lib/services.service.ts:6",{"_index":217,"title":{},"body":{"injectables/ServicesService.html":{}}}],["core/services/src/lib/shared",{"_index":218,"title":{},"body":{"injectables/SharedDataService.html":{},"coverage.html":{}}}],["core/services/src/lib/user.service.ts",{"_index":236,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["core/services/src/lib/user.service.ts:15",{"_index":244,"title":{},"body":{"injectables/UserService.html":{}}}],["core/services/src/lib/user.service.ts:16",{"_index":246,"title":{},"body":{"injectables/UserService.html":{}}}],["core/services/src/lib/user.service.ts:17",{"_index":241,"title":{},"body":{"injectables/UserService.html":{}}}],["core/services/src/lib/user.service.ts:23",{"_index":243,"title":{},"body":{"injectables/UserService.html":{}}}],["coverage",{"_index":264,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["credentials",{"_index":41,"title":{},"body":{"injectables/ApiService.html":{}}}],["credentials.accesskeyid",{"_index":80,"title":{},"body":{"injectables/ApiService.html":{}}}],["credentials.secretkey",{"_index":82,"title":{},"body":{"injectables/ApiService.html":{}}}],["credentials.sessiontoken",{"_index":84,"title":{},"body":{"injectables/ApiService.html":{}}}],["currencypipe",{"_index":208,"title":{},"body":{"modules/ServicesModule.html":{}}}],["customrolearn",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SharedDataService.html":{}}}],["data.service",{"_index":212,"title":{},"body":{"modules/ServicesModule.html":{},"injectables/UserService.html":{}}}],["data.service.ts",{"_index":219,"title":{},"body":{"injectables/SharedDataService.html":{},"coverage.html":{}}}],["data.service.ts:11",{"_index":229,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["data.service.ts:15",{"_index":231,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["data.service.ts:19",{"_index":226,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["data.service.ts:27",{"_index":224,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["data.service.ts:7",{"_index":223,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["datepipe",{"_index":207,"title":{},"body":{"modules/ServicesModule.html":{}}}],["declarations",{"_index":185,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["default",{"_index":29,"title":{},"body":{"injectables/ApiService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["defined",{"_index":18,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":11,"title":{},"body":{"injectables/ApiService.html":{},"injectables/SharedDataService.html":{}}}],["delete(key",{"_index":225,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["delete(path",{"_index":26,"title":{},"body":{"injectables/ApiService.html":{}}}],["dependencies",{"_index":184,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["directive",{"_index":176,"title":{},"body":{"components/ServicesComponent.html":{}}}],["directives",{"_index":179,"title":{},"body":{"components/ServicesComponent.html":{}}}],["documentation",{"_index":265,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":163,"title":{},"body":{"components/ServicesComponent.html":{}}}],["east",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["element",{"_index":175,"title":{},"body":{"components/ServicesComponent.html":{}}}],["err",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":69,"title":{},"body":{"injectables/ApiService.html":{}}}],["error('no",{"_index":87,"title":{},"body":{"injectables/ApiService.html":{}}}],["error.response",{"_index":70,"title":{},"body":{"injectables/ApiService.html":{}}}],["error.response.data",{"_index":71,"title":{},"body":{"injectables/ApiService.html":{}}}],["export",{"_index":55,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":188,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["false",{"_index":261,"title":{},"body":{"injectables/UserService.html":{}}}],["family_name",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":234,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["from(this.apiservice.put(constants.api_endpoint_paths.clear_sessions",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(key",{"_index":228,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["get(path",{"_index":33,"title":{},"body":{"injectables/ApiService.html":{}}}],["getcredentialsforcustomarn",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcredentialsforcustomarn(arn",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcurrentuser",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["getsession",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyusername",{"_index":239,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyusername(username",{"_index":242,"title":{},"body":{"injectables/UserService.html":{}}}],["globalsignout",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["globalsignout(username",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["html",{"_index":174,"title":{},"body":{"components/ServicesComponent.html":{}}}],["identifier",{"_index":266,"title":{},"body":{"coverage.html":{}}}],["identityid",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["import",{"_index":47,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":214,"title":{},"body":{"modules/ServicesModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["init",{"_index":62,"title":{},"body":{"injectables/ApiService.html":{}}}],["init['headers",{"_index":73,"title":{},"body":{"injectables/ApiService.html":{}}}],["inject",{"_index":48,"title":{},"body":{"injectables/ApiService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["json",{"_index":36,"title":{},"body":{"injectables/ApiService.html":{}}}],["key",{"_index":227,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["legend",{"_index":173,"title":{},"body":{"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"index.html":{}}}],["lib",{"_index":168,"title":{},"body":{"components/ServicesComponent.html":{}}}],["loggeduser",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["loggedusername",{"_index":237,"title":{},"body":{"injectables/UserService.html":{}}}],["logins",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["makeapigatewayrequestwithcustomcredentials",{"_index":12,"title":{},"body":{"injectables/ApiService.html":{}}}],["makeapigatewayrequestwithcustomcredentials(credentials",{"_index":37,"title":{},"body":{"injectables/ApiService.html":{}}}],["matching",{"_index":89,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"modules.html":{}}}],["metadata",{"_index":166,"title":{},"body":{"components/ServicesComponent.html":{}}}],["methods",{"_index":9,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":181,"title":{"modules/ServicesModule.html":{}},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["modules",{"_index":183,"title":{"modules.html":{}},"body":{"modules/ServicesModule.html":{},"modules.html":{}}}],["mustbe",{"_index":60,"title":{},"body":{"injectables/ApiService.html":{}}}],["name",{"_index":22,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["new",{"_index":86,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["new_password_required",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpassword",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["ngmodule",{"_index":199,"title":{},"body":{"modules/ServicesModule.html":{}}}],["null",{"_index":42,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{}}}],["optional",{"_index":24,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["out",{"_index":197,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["overview",{"_index":275,"title":{"index.html":{}},"body":{"index.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["params",{"_index":27,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["password",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":31,"title":{},"body":{"injectables/ApiService.html":{}}}],["post",{"_index":13,"title":{},"body":{"injectables/ApiService.html":{}}}],["post(path",{"_index":43,"title":{},"body":{"injectables/ApiService.html":{}}}],["preferred_username",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":58,"title":{},"body":{"injectables/ApiService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":220,"title":{},"body":{"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["providedin",{"_index":53,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":187,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["put",{"_index":14,"title":{},"body":{"injectables/ApiService.html":{}}}],["put(path",{"_index":45,"title":{},"body":{"injectables/ApiService.html":{}}}],["querystringparameters",{"_index":63,"title":{},"body":{"injectables/ApiService.html":{}}}],["region",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestname",{"_index":38,"title":{},"body":{"injectables/ApiService.html":{}}}],["requestnewpassword",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestnewpassword(newpassword",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["reset",{"_index":196,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}],["response",{"_index":257,"title":{},"body":{"injectables/UserService.html":{}}}],["responsetype",{"_index":34,"title":{},"body":{"injectables/ApiService.html":{}}}],["result",{"_index":88,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"modules.html":{}}}],["resultcode",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":90,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"modules.html":{}}}],["return",{"_index":65,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{}}}],["returns",{"_index":32,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["root",{"_index":54,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["rxjs/observable/from",{"_index":247,"title":{},"body":{"injectables/UserService.html":{}}}],["sdk",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretkey",{"_index":81,"title":{},"body":{"injectables/ApiService.html":{}}}],["selector",{"_index":167,"title":{},"body":{"components/ServicesComponent.html":{}}}],["services",{"_index":169,"title":{},"body":{"components/ServicesComponent.html":{},"modules/ServicesModule.html":{}}}],["services.component",{"_index":200,"title":{},"body":{"modules/ServicesModule.html":{}}}],["servicescomponent",{"_index":161,"title":{"components/ServicesComponent.html":{}},"body":{"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"coverage.html":{},"index.html":{}}}],["servicesmodule",{"_index":182,"title":{"modules/ServicesModule.html":{}},"body":{"modules/ServicesModule.html":{},"index.html":{},"modules.html":{}}}],["servicesservice",{"_index":215,"title":{"injectables/ServicesService.html":{}},"body":{"injectables/ServicesService.html":{},"coverage.html":{}}}],["session",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessiontoken",{"_index":83,"title":{},"body":{"injectables/ApiService.html":{}}}],["set",{"_index":222,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["set(key",{"_index":230,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["shared",{"_index":211,"title":{},"body":{"modules/ServicesModule.html":{},"injectables/UserService.html":{}}}],["shareddataservice",{"_index":193,"title":{"injectables/SharedDataService.html":{}},"body":{"modules/ServicesModule.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["signin",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(username",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["signout",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"components/ServicesComponent.html":{},"modules/ServicesModule.html":{},"injectables/ServicesService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["statements",{"_index":267,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":17,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["string,user",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["styles",{"_index":172,"title":{},"body":{"components/ServicesComponent.html":{}}}],["success",{"_index":238,"title":{},"body":{"injectables/UserService.html":{}}}],["support",{"_index":278,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":279,"title":{},"body":{"modules.html":{}}}],["table",{"_index":274,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":171,"title":{},"body":{"components/ServicesComponent.html":{}}}],["then(response",{"_index":255,"title":{},"body":{"injectables/UserService.html":{}}}],["this.apiname",{"_index":61,"title":{},"body":{"injectables/ApiService.html":{}}}],["this.apiservice.get(constants.api_endpoint_paths.user_by_username",{"_index":254,"title":{},"body":{"injectables/UserService.html":{}}}],["this.data",{"_index":235,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["this.data[key",{"_index":232,"title":{},"body":{"injectables/SharedDataService.html":{}}}],["this.getsession",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggedusername",{"_index":251,"title":{},"body":{"injectables/UserService.html":{}}}],["this.shareddataservice.get('loggedusername",{"_index":252,"title":{},"body":{"injectables/UserService.html":{}}}],["this.success",{"_index":258,"title":{},"body":{"injectables/UserService.html":{}}}],["this.user",{"_index":256,"title":{},"body":{"injectables/UserService.html":{}}}],["throw",{"_index":59,"title":{},"body":{"injectables/ApiService.html":{}}}],["tree",{"_index":164,"title":{},"body":{"components/ServicesComponent.html":{}}}],["true",{"_index":259,"title":{},"body":{"injectables/UserService.html":{}}}],["try",{"_index":64,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{}}}],["type",{"_index":23,"title":{},"body":{"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.challengename",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.mail@something.com",{"_index":253,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":213,"title":{},"body":{"modules/ServicesModule.html":{}}}],["username",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":194,"title":{"injectables/UserService.html":{}},"body":{"modules/ServicesModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["value",{"_index":30,"title":{},"body":{"injectables/ApiService.html":{},"injectables/SharedDataService.html":{},"injectables/UserService.html":{}}}],["var",{"_index":177,"title":{},"body":{"components/ServicesComponent.html":{}}}],["void",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SharedDataService.html":{}}}],["zoom",{"_index":195,"title":{},"body":{"modules/ServicesModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ApiService.html":{"url":"injectables/ApiService.html","title":"injectable - ApiService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            backoffice-core/services/src/lib/api.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                makeApiGatewayRequestWithCustomCredentials\n                            \n                            \n                                    Async\n                                post\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiName: string)\n                    \n                \n                        \n                            \n                                Defined in backoffice-core/services/src/lib/api.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        apiName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: string, params: any)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/api.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: string, params: any, responseType: string)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/api.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'json'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            makeApiGatewayRequestWithCustomCredentials\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    makeApiGatewayRequestWithCustomCredentials(credentials: any, requestName: string, params: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/api.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                                \n                                    requestName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: string, params: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/api.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: string, params: any, body: any, credentials: any)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/api.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    credentials\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport API from '@aws-amplify/api';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n\n  constructor(@Inject('apiName') private apiName: string) {\n    if (!apiName)\n      throw ('API name mustbe defined.');\n    this.apiName = apiName;\n  }\n\n\n  async get(path: string, params: any = {}, responseType: string = 'json') {\n    let init = {\n      responseType: responseType,\n      queryStringParameters: params\n    };\n    try {\n      return await API.get(this.apiName, path, init);\n    }\n    catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n  }\n\n  async post(path: string, params: any = {}, body: any = {}) {\n    let init = {\n      queryStringParameters: params,\n      body: body\n    };\n    try {\n      return await API.post(this.apiName, path, init);\n    }\n    catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n  }\n\n  async put(path: string, params: any = {}, body: any = {}, credentials: any = null) {\n    let init = {\n      queryStringParameters: params,\n      body: body\n    };\n    if (credentials) {\n      init['headers'] = {\n        Authorization: credentials\n      }\n    }\n    try {\n      return await API.put(this.apiName, path, init);\n    }\n    catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n\n  }\n\n  async delete(path: string, params: any = {}) {\n    let init = {\n      queryStringParameters: params,\n    }\n    try {\n      return await API.del(this.apiName, path, init);\n    }\n    catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n  }\n\n  async makeApiGatewayRequestWithCustomCredentials(credentials: any = null, requestName: string, params: any = {}, body: any = {}) {\n    if (credentials) {\n      // let apigClient = apigClientFactory.newClient({\n      //   accessKey: credentials.AccessKeyId,\n      //   secretKey: credentials.SecretKey,\n      //   sessionToken: credentials.SessionToken\n      // });\n      // return await apigClient[requestName](params, body);\n    }\n    throw new Error('No credentials.');\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            backoffice-core/services/src/lib/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmNewPassword\n                            \n                            \n                                    Async\n                                getCredentialsForCustomArn\n                            \n                            \n                                    Async\n                                getCurrentUser\n                            \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                globalSignOut\n                            \n                            \n                                    Async\n                                requestNewPassword\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in backoffice-core/services/src/lib/auth.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirmNewPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmNewPassword(username: string, code: string, newPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCredentialsForCustomArn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCredentialsForCustomArn(arn: string, callback: (err: any,data: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arn\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCurrentUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentUser()\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession()\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            globalSignOut\n                        \n                        \n                    \n                \n            \n            \n                \nglobalSignOut(username)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestNewPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestNewPassword(newPassword: string, name: string, family_name: string, preferred_username: string, user: any, callback: (resultCode: string,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    family_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    preferred_username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(username: string, password: string, callback: (resultCode: string,user: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signOut()\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/auth.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport * as AWS from 'aws-sdk';\nimport Auth from '@aws-amplify/auth';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    constructor() { }\n\n    async getCurrentUser() {\n        return await Auth.currentAuthenticatedUser();\n    }\n\n    async getSession() {\n        return await Auth.currentSession();\n    }\n\n    async signIn(username: string, password: string, callback: (resultCode: string, user: any) => void) {\n        try {\n            const user = await Auth.signIn(username, password);\n            if (user.challengeName === 'NEW_PASSWORD_REQUIRED') {\n                callback(user.challengeName, user);\n            } else {\n                callback(null, user);\n            }\n        } catch (err) {\n            callback(err.code, null);\n        }\n    }\n\n    async requestNewPassword(newPassword: string, name: string, family_name: string, preferred_username: string, user: any, callback: (resultCode: string, user: any) => void) {\n        try {\n            const loggedUser = await Auth.completeNewPassword(user, newPassword, { name, family_name, preferred_username });\n            callback(null, loggedUser);\n        } catch (err) {\n            callback(err.code, null);\n        }\n    }\n\n    async signOut() {\n        return await Auth.signOut();\n    }\n\n    async confirmNewPassword(username: string, code: string, newPassword: string) {\n        return await Auth.forgotPasswordSubmit(username, code, newPassword);\n    }\n\n    globalSignOut(username) {\n        let body = {\n            username: username\n        };\n        //return from(this.apiService.put(Constants.API_ENDPOINT_PATHS.CLEAR_SESSIONS, {}, body));\n    }\n\n    async getCredentialsForCustomArn(arn: string, callback: (err: any, data: any) => void) {\n        const { identityId } = await Auth.currentCredentials();\n        let session = await this.getSession();\n        let logins: any = {};\n        let params = {\n            IdentityId: identityId,\n            CustomRoleArn: arn,\n            Logins: logins\n        };\n        let cognitoidentity = new AWS.CognitoIdentity({ region: 'us-east-1' });\n        cognitoidentity.getCredentialsForIdentity(params, callback);\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ServicesComponent.html":{"url":"components/ServicesComponent.html","title":"component - ServicesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ServicesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    backoffice-core/services/src/lib/services.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                lib-services\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in backoffice-core/services/src/lib/services.component.ts:12\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'lib-services',\n  template: `\n  `,\n  styles: []\n})\n\nexport class ServicesComponent {\n  constructor() {  }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ServicesComponent', 'selector': 'lib-services'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ServicesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_declarations\n\n\n\ncluster_ServicesModule_exports\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nServicesComponent\n\nServicesComponent\n\n\n\nServicesModule\n\nServicesModule\n\nServicesModule -->\n\nServicesComponent->ServicesModule\n\n\n\n\n\nServicesComponent \n\nServicesComponent \n\nServicesComponent  -->\n\nServicesModule->ServicesComponent \n\n\n\n\n\nApiService\n\nApiService\n\nServicesModule -->\n\nApiService->ServicesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nServicesModule -->\n\nAuthService->ServicesModule\n\n\n\n\n\nSharedDataService\n\nSharedDataService\n\nServicesModule -->\n\nSharedDataService->ServicesModule\n\n\n\n\n\nUserService\n\nUserService\n\nServicesModule -->\n\nUserService->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            backoffice-core/services/src/lib/services.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ServicesComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ApiService\n                        \n                        \n                            AuthService\n                        \n                        \n                            SharedDataService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ServicesComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { ServicesComponent } from \"./services.component\";\n\nimport { CommonModule } from \"@angular/common\";\nimport { AmplifyAngularModule, AmplifyService } from \"aws-amplify-angular\";\nimport { DatePipe, CurrencyPipe } from \"@angular/common\";\n\n//  Services\nimport { ApiService } from \"./api.service\";\nimport { AuthService } from \"./auth.service\";\nimport { SharedDataService } from \"./shared-data.service\";\nimport { UserService } from \"./user.service\";\n\n\n@NgModule({\n  declarations: [ServicesComponent],\n  imports: [CommonModule, AmplifyAngularModule],\n  exports: [ServicesComponent],\n  providers: [\n    AmplifyService,\n    ApiService,\n    AuthService,\n    DatePipe,\n    CurrencyPipe,\n    SharedDataService,\n    UserService\n  ]\n})\nexport class ServicesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ServicesService.html":{"url":"injectables/ServicesService.html","title":"injectable - ServicesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ServicesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            backoffice-core/services/src/lib/services.service.ts\n        \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in backoffice-core/services/src/lib/services.service.ts:6\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServicesService {\n\n  constructor() { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SharedDataService.html":{"url":"injectables/SharedDataService.html","title":"injectable - SharedDataService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SharedDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            backoffice-core/services/src/lib/shared-data.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in backoffice-core/services/src/lib/shared-data.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/shared-data.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/shared-data.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/shared-data.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(key: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/shared-data.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in backoffice-core/services/src/lib/shared-data.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class SharedDataService {\n  private data: any = {};\n\n  constructor() {}\n\n  get(key: string) {\n    return this.data[key] || null;\n  }\n\n  set(key: string, value: any) {\n    this.data[key] = value;\n  }\n\n  delete(key: string) {\n    if (this.data[key]) {\n      delete this.data[key];\n      return;\n    }\n    console.log(\"Could not find key ${key} in data.\");\n  }\n\n  clear() {\n    this.data = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            backoffice-core/services/src/lib/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loggedUsername\n                            \n                            \n                                success\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiService: ApiService, sharedDataService: SharedDataService)\n                    \n                \n                        \n                            \n                                Defined in backoffice-core/services/src/lib/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        apiService\n                                                  \n                                                        \n                                                                        ApiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sharedDataService\n                                                  \n                                                        \n                                                                        SharedDataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in backoffice-core/services/src/lib/user.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loggedUsername\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in backoffice-core/services/src/lib/user.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            success\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in backoffice-core/services/src/lib/user.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in backoffice-core/services/src/lib/user.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { from } from 'rxjs/observable/from';\n\nimport { ApiService } from './api.service';\n\nimport * as Constants from '../../../../backoffice-ar/src/app/utils/constants';\nimport { SharedDataService } from './shared-data.service';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n\n    private loggedUsername: string = '';\n    user: any;\n    success: boolean;\n\n    constructor(private apiService: ApiService, private sharedDataService: SharedDataService) {\n        this.loggedUsername = this.sharedDataService.get('loggedUsername');\n    }\n\n    async getUserByUsername(username: string) {\n        let params = {\n            loggedusername: 'user.mail@something.com',\n            username: username\n        };\n        await this.apiService.get(Constants.API_ENDPOINT_PATHS.USER_BY_USERNAME, params)\n          .then(response => {\n            this.user = response;\n            this.success = true\n          })\n          .catch(error => {\n            this.success = false\n            console.log('error')\n            console.log(error)\n          })\n      }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                backoffice-core/services/src/lib/api.service.ts\n            \n            injectable\n            ApiService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                backoffice-core/services/src/lib/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                backoffice-core/services/src/lib/services.component.ts\n            \n            component\n            ServicesComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                backoffice-core/services/src/lib/services.service.ts\n            \n            injectable\n            ServicesService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                backoffice-core/services/src/lib/shared-data.service.ts\n            \n            injectable\n            SharedDataService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                backoffice-core/services/src/lib/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_declarations\n\n\n\ncluster_ServicesModule_exports\n\n\n\ncluster_ServicesModule_providers\n\n\n\n\nServicesComponent\n\nServicesComponent\n\n\n\nServicesModule\n\nServicesModule\n\nServicesModule -->\n\nServicesComponent->ServicesModule\n\n\n\n\n\nServicesComponent \n\nServicesComponent \n\nServicesComponent  -->\n\nServicesModule->ServicesComponent \n\n\n\n\n\nApiService\n\nApiService\n\nServicesModule -->\n\nApiService->ServicesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nServicesModule -->\n\nAuthService->ServicesModule\n\n\n\n\n\nSharedDataService\n\nSharedDataService\n\nServicesModule -->\n\nSharedDataService->ServicesModule\n\n\n\n\n\nUserService\n\nUserService\n\nServicesModule -->\n\nUserService->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
